const APP_VERSION="31",APP_CACHE_NAME=`mdwiki-app-cache-v${"31"}`,GITHUB_CACHE_NAME="mdwiki-github-cache",GITHUB_API_HOST="api.github.com",appFiles=["github-markdown.107c999b.css","github-markdown.5386ff48.css","github-markdown.5386ff48.js","index.html","index.js","manifest.webmanifest","src.5ea8d594.js","src.d5b07388.css","src.e31bb0bc.css","src.e31bb0bc.js","styles.397f269d.css","styles.45de0957.css","styles.45de0957.js","uikit-core.9ad775e6.js","uikit-icons.9ee4fb5a.js","uikit.e371eedf.css","uikit.e371eedf.js","uikit.e9aa4cfd.js","uikit.eac1f00b.js","uikit.f5f8006d.css","wiki-192px.5eee20f1.png","wiki-192px.b778628f.png","wiki-512px.a809d0e9.png","wiki-512px.b05caf2d.png"],pathToIgnore=["/user"];self.addEventListener("install",a=>{self.skipWaiting(),a.waitUntil(installServiceWorker())}),self.addEventListener("activate",a=>{a.waitUntil(cleanOldCaches())}),self.addEventListener("fetch",a=>{"GET"!==a.request.method||a.respondWith(handleFetch(a.request))});async function installServiceWorker(){const a=await checkIfIsUpdate();await addToCache(APP_CACHE_NAME,appFiles),a&&(await notifyUpdate())}async function checkIfIsUpdate(){const a=await caches.keys();return a.some(a=>a===GITHUB_CACHE_NAME)}async function notifyUpdate(){const a=await clients.matchAll({includeUncontrolled:!0,type:"window"});for(const b of a)b.postMessage({type:"update",version:31})}async function handleFetch(a){const b=new URL(a.url);return 0<=pathToIgnore.indexOf(b.pathname)?fetch(a):b.host===GITHUB_API_HOST?navigator.onLine?networkFirst(GITHUB_CACHE_NAME,b,b.pathname):cacheFirst(GITHUB_CACHE_NAME,a,b.pathname):cacheFirst(APP_CACHE_NAME,a,b.pathname)}async function cacheFirst(a,b,c=b){const d=await caches.open(a),e=await d.match(c);return e?e:fetch(b).then(a=>(200===a.status&&d.put(c,a.clone()),d.put(c,a.clone()),a))}async function networkFirst(a,b,c){const d=await caches.open(a);return fetch(b).then(a=>(200===a.status&&d.put(c,a.clone()),a)).catch(()=>d.match(c))}async function addToCache(a,b){const c=await caches.open(a);return c.addAll(b)}async function cleanOldCaches(){const a=[APP_CACHE_NAME],b=await caches.keys(),c=b.filter(b=>!a.includes(b));return 0<c.length?Promise.all(c.map(a=>caches.delete(a))):void 0}